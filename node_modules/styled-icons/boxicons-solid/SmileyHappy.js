var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
import * as React from 'react';
import styled from 'styled-components';
var StyledIcon = React.forwardRef(function (props, ref) {
    var title = props.title, size = props.size, svgProps = __rest(props, ["title", "size"]);
    var iconProps = {
        viewBox: '0 0 24 24',
        height: props.height !== undefined ? props.height : props.size,
        width: props.width !== undefined ? props.width : props.size,
        // @ts-ignore - aria is not always defined on SVG in React TypeScript types
        'aria-hidden': props.title == null ? 'true' : undefined,
        focusable: 'false',
        role: props.title != null ? 'img' : undefined,
        "fill": "currentColor",
    };
    return (React.createElement("svg", __assign({}, iconProps, svgProps, { ref: ref }),
        props.title && React.createElement("title", { key: "SmileyHappy-title" }, props.title),
        React.createElement("ellipse", { cx: 8.5, cy: 10, fill: "none", rx: 1.5, ry: 2, key: "k0" }),
        ",",
        React.createElement("path", { fill: "none", d: "M12 16a3.97 3.97 0 0 1-3.201-1.601L7.2 15.601A5.954 5.954 0 0 0 12 18a5.957 5.957 0 0 0 4.8-2.399L15.2 14.4A3.97 3.97 0 0 1 12 16z", key: "k1" }),
        ",",
        React.createElement("ellipse", { cx: 15.5, cy: 10, fill: "none", rx: 1.5, ry: 2, key: "k2" }),
        ",",
        React.createElement("path", { d: "M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zM8.5 8c.828 0 1.5.896 1.5 2s-.672 2-1.5 2S7 11.104 7 10s.672-2 1.5-2zM12 18a5.954 5.954 0 0 1-4.8-2.399L8.799 14.4A3.971 3.971 0 0 0 12 16c1.27 0 2.436-.583 3.2-1.601l1.6 1.201A5.955 5.955 0 0 1 12 18zm3.5-6c-.828 0-1.5-.896-1.5-2s.672-2 1.5-2 1.5.896 1.5 2-.672 2-1.5 2z", key: "k3" })));
});
export var SmileyHappy = styled(StyledIcon)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: inline-block;\n  vertical-align: middle;\n  overflow: hidden;\n"], ["\n  display: inline-block;\n  vertical-align: middle;\n  overflow: hidden;\n"])));
SmileyHappy.displayName = 'SmileyHappy';
export var SmileyHappyDimensions = { height: 24, width: 24 };
var templateObject_1;
